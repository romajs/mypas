* mypas -> PROGRAM ID ';' { specification } stmblk '.'
* 
* * Object declaration scope is defined next:
* 
* specification ->  vardeclr | sbrdeclr
* 
* vardeclr ->  VAR idlist ':' typespec ';' { idlist ':' typespec ';' }
* 
* sbrdeclr ->  sbrhead { vardeclr } stmblk ';'
* 
* idlist -> ID { ',' ID }
* 
* typespec -> smptype | ARRAY '[' UINT ']' OF typespec
* 
* smptype -> INTEGER | REAL | DOUBLE | BOOLEAN | STRING
* 
* sbrhead -> PROCEDURE ID argdef ';' | FUNCTION ID argdef ':' smptype ';'
* 
* argdef -> [ '(' arglist ')' ]
* 
* arglist -> argspc { ';' argspc }
* 
* argspc -> [ VAR ] idlist ':' smptype { idlist ':' smptype }
* 
* * Imperative scope is defined hereafter: 
* 
* stmt -> <epsilon> | ifstmt | whlstmt | forstmt | repstmt | idstmt | stmblk
* 
* stmblk -> BEGIN stmtlst END
* 
* stmtlst -> stmt { ';' stmt }
* 
* ifstmt -> IF expr THEN stmt [ ELSE stmt ]
* 
* whlstmt -> WHILE expr DO stmt
* 
* forstmt -> FOR ID indexing ':=' expr DOWNTO|TO expr DO stmt
* 
* repstmt -> REPEAT stmtlst UNTIL expr
* 
* idstmt -> ID [ parm | indexing ':=' expr ]
* 
* indexing -> {  '[' expr ']' }
* 
* parm -> '(' [ ')' | exprlst ')']
* 
* exprlst -> expr { ',' expr }
* 
* * Algebric and Boolean Expressions are defined hereafter: 
* 
* expr -> E [ relop E ]
* 
* relop -> '>' | '>=' | '<' | '<=' | '=' | '<>'
* 
* E -> [ '-' | NOT ] term { addop term }
* 
* addop -> '+' | '-' | OR
* 
* term -> fact { mulop fact }
* 
* mulop -> '' | '' | DIV | MOD | AND
* 
* fact -> ID [ param | indexing ]